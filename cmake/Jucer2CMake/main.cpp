// Copyright (c) 2017 Alain Martin, Matthieu Talbot
//
// This file is part of JUCE.cmake.
//
// JUCE.cmake is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// JUCE.cmake is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with JUCE.cmake.  If not, see <http://www.gnu.org/licenses/>.

#include "JuceHeader.h"

using juce::Identifier;
#include <Utility/jucer_PresetIDs.h>

#include <fstream>
#include <iostream>
#include <locale>
#include <string>
#include <vector>


void printError(const std::string& error)
{
  std::cerr << "error: " << error << std::endl;
}


int main(int argc, char* argv[])
{
  if (argc != 3)
  {
    std::cerr << "usage: Jucer2CMake"
                 " <jucer_project_file>"
                 " <Reprojucer.cmake_file>"
              << std::endl;
    return 1;
  }

  const auto args = std::vector<std::string>{argv, argv + argc};
  const auto& jucerFilePath = args.at(1);
  const auto& reprojucerFilePath = args.at(2);

  const auto xml = std::unique_ptr<juce::XmlElement>{
    juce::XmlDocument::parse(juce::File{jucerFilePath})};
  if (xml == nullptr || !xml->hasTagName(Ids::JUCERPROJECT.toString()))
  {
    printError(jucerFilePath + " is not a valid Jucer project.");
    return 1;
  }

  const auto jucerProject = juce::ValueTree::fromXml(*xml);
  if (!jucerProject.hasType(Ids::JUCERPROJECT))
  {
    printError(jucerFilePath + " is not a valid Jucer project.");
    return 1;
  }

  std::ofstream out{"CMakeLists.txt"};

  const auto jucerFileName = juce::File{jucerFilePath}.getFileName().toStdString();

  // Preamble
  {
    out << "# This file was generated by Jucer2CMake from " << jucerFileName << "\n"
        << "\n"
        << "cmake_minimum_required(VERSION 3.4)\n"
        << "\n"
        << "\n";
  }

  // include(Reprojucer)
  {
    out << "list(APPEND CMAKE_MODULE_PATH \""
        << "${CMAKE_CURRENT_LIST_DIR}/"
        << juce::File{reprojucerFilePath}
             .getParentDirectory()
             .getRelativePathFrom(juce::File::getCurrentWorkingDirectory())
             .replace("\\", "/")
        << "\")\n"
        << "include(Reprojucer)\n"
        << "\n"
        << "\n";
  }

  std::string escapedJucerFileName = jucerFileName;
  std::replace_if(escapedJucerFileName.begin(), escapedJucerFileName.end(),
    [](const std::string::value_type& c)
    {
      return !std::isalpha(c, std::locale{"C"});
    },
    '_');

  // get_filename_component()
  {
    out << "if(NOT DEFINED " << escapedJucerFileName << "_FILE)\n"
        << "  message(FATAL_ERROR \"" << escapedJucerFileName
        << "_FILE must be defined\")\n"
        << "endif()\n"
        << "\n"
        << "get_filename_component(" << escapedJucerFileName << "_FILE\n"
        << "  \"${" << escapedJucerFileName << "_FILE}\" ABSOLUTE\n"
        << "  BASE_DIR \"${CMAKE_CURRENT_BINARY_DIR}\"\n"
        << ")\n"
        << "\n"
        << "if(NOT EXISTS \"${" << escapedJucerFileName << "_FILE}\")\n"
        << "  message(FATAL_ERROR \"No such file: ${" << escapedJucerFileName
        << "_FILE}\")\n"
        << "endif()\n"
        << "\n"
        << "get_filename_component(" << escapedJucerFileName << "_DIR\n"
        << "  \"${" << escapedJucerFileName << "_FILE}\" DIRECTORY\n"
        << ")\n"
        << "\n"
        << "\n";
  }

  // jucer_project_begin()
  {
    const auto projectSetting = [&jucerProject](
      const std::string cmakeTag, const juce::Identifier& property)
    {
      if (jucerProject.hasProperty(property))
      {
        return std::move(cmakeTag) + " \"" +
               jucerProject.getProperty(property).toString().toStdString() + "\"";
      }

      return "# " + std::move(cmakeTag);
    };

    out << "jucer_project_begin(\n"
        << "  " << projectSetting("PROJECT_NAME", Ids::name) << "\n"
        << "  " << projectSetting("PROJECT_VERSION", Ids::version) << "\n"
        << "  " << projectSetting("COMPANY_NAME", Ids::companyName) << "\n"
        << "  " << projectSetting("COMPANY_WEBSITE", Ids::companyWebsite) << "\n"
        << "  " << projectSetting("COMPANY_EMAIL", Ids::companyEmail) << "\n"
        << "  PROJECT_TYPE \"GUI Application\"\n"
        << "  " << projectSetting("BUNDLE_IDENTIFIER", Ids::bundleIdentifier) << "\n"
        << "  BINARYDATACPP_SIZE_LIMIT \"Default\"\n"
        << "  " << projectSetting("BINARYDATA_NAMESPACE", Ids::binaryDataNamespace)
        << "\n"
        << "  " << projectSetting("PREPROCESSOR_DEFINITIONS", Ids::defines) << "\n"
        << "  " << projectSetting("PROJECT_ID", Ids::ID) << "\n"
        << ")\n"
        << "\n";
  }

  // jucer_project_files()
  {
    const auto mainGroup = jucerProject.getChildWithName(Ids::MAINGROUP);
    const auto mainGroupName = mainGroup.getProperty(Ids::name).toString();

    for (const auto& group : mainGroup)
    {
      const auto groupName = group.getProperty(Ids::name).toString();
      out << "jucer_project_files(\"" << (mainGroupName + "/" + groupName) << "\"\n";

      for (const auto& file : group)
      {
        out << "  \"${" << escapedJucerFileName << "_DIR"
            << "}/" << file.getProperty(Ids::file).toString() << "\"\n";
      }

      out << ")\n"
          << "\n";
    }
  }

  // jucer_project_module()
  {
    std::vector<std::string> moduleNames;
    for (const auto& module : jucerProject.getChildWithName(Ids::MODULES))
    {
      moduleNames.push_back(module.getProperty(Ids::ID).toString().toStdString());
    }

    const auto modulePaths = jucerProject.getChildWithName(Ids::EXPORTFORMATS)
                               .getChild(1)
                               .getChildWithName(Ids::MODULEPATHS);

    for (const auto& moduleName : moduleNames)
    {
      const auto relativeModulePath =
        modulePaths.getChildWithProperty(Ids::ID, juce::var{juce::String{moduleName}})
          .getProperty(Ids::path)
          .toString();

      out << "jucer_project_module(\n"
          << "  " << moduleName << "\n"
          << "  PATH \"${" << escapedJucerFileName << "_DIR"
          << "}/" << relativeModulePath << "\"\n";

      const auto moduleHeader = juce::File{jucerFilePath}
                                  .getParentDirectory()
                                  .getChildFile(relativeModulePath)
                                  .getChildFile(juce::String{moduleName})
                                  .getChildFile(juce::String{moduleName + ".h"});
      juce::StringArray moduleHeaderLines;
      moduleHeader.readLines(moduleHeaderLines);

      for (const auto& line : moduleHeaderLines)
      {
        if (line.startsWith("/** Config: "))
        {
          const auto moduleOption = line.substring(12);
          out << "  # " << moduleOption << "\n";
        }
      }

      out << ")\n"
          << "\n";
    }
  }

  out << "jucer_project_end()" << std::endl;

  return 0;
}
